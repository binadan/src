package com.gcflower.action;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.SQLQuery;

import com.gcflower.entity.HostManagement;
import com.gcflower.entity.HostManagement1;
import com.gcflower.entity.Paymentmanagement;
import com.gcflower.service.HostManagementService;
import com.gcflower.service.PaymentManagementService;
import com.gcflower.util.PageManager;
import com.mysql.jdbc.ResultSet;

public class HostManagementAction extends BaseAction {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	protected Log log = LogFactory.getLog(HostManagementAction.class);

	private Integer id;
	private String host;
	private Integer M_ID;
	private String M_MANUAL;
	private String msg;// 接收
	private int result;
	private Paymentmanagement paymentmanagement;
	private PaymentManagementService paymentManagementService;
	private HostManagement1 hostManagement1;
	private String ids;// id串

	private String m_state;
	private String p_state;

	public String getM_state() {
		return m_state;
	}

	public void setM_state(String m_state) {
		this.m_state = m_state;
	}

	public String getP_state() {
		return p_state;
	}

	public void setP_state(String p_state) {
		this.p_state = p_state;
	}

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public String getMsg() {
		return msg;
	}

	public void setMsg(String msg) {
		this.msg = msg;
	}

	public HostManagement1 getHostManagement1() {
		return hostManagement1;
	}

	public void setHostManagement1(HostManagement1 hostManagement1) {
		this.hostManagement1 = hostManagement1;
	}

	public Paymentmanagement getPaymentmanagement() {
		return paymentmanagement;
	}

	public void setPaymentmanagement(Paymentmanagement paymentmanagement) {
		this.paymentmanagement = paymentmanagement;
	}

	public PaymentManagementService getPaymentManagementService() {
		return paymentManagementService;
	}

	public void setPaymentManagementService(
			PaymentManagementService paymentManagementService) {
		this.paymentManagementService = paymentManagementService;
	}

	public int getResult() {
		return result;
	}

	public void setResult(int result) {
		this.result = result;
	}

	public Integer getM_ID() {
		return M_ID;
	}

	public void setM_ID(Integer m_ID) {
		M_ID = m_ID;
	}

	public String getHost() {
		return host;
	}

	public void setHost(String host) {
		this.host = host;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getM_MANUAL() {
		return M_MANUAL;
	}

	public void setM_MANUAL(String m_MANUAL) {
		M_MANUAL = m_MANUAL;
	}

	private HostManagement hostManagement;

	private HostManagementService hostManagementService;

	private List<HostManagement> listH;
	private List<HostManagement> listH1;

	private PageManager page = new PageManager(10);

	public List<HostManagement> getListH1() {
		return listH1;
	}

	public void setListH1(List<HostManagement> listH1) {
		this.listH1 = listH1;
	}

	public HostManagement getHostManagement() {
		return hostManagement;
	}

	public void setHostManagement(HostManagement hostManagement) {
		this.hostManagement = hostManagement;
	}

	public HostManagementService getHostManagementService() {
		return hostManagementService;
	}

	public void setHostManagementService(
			HostManagementService hostManagementService) {
		this.hostManagementService = hostManagementService;
	}

	public List<HostManagement> getListH() {
		return listH;
	}

	public void setListH(List<HostManagement> listH) {
		this.listH = listH;
	}

	public PageManager getPage() {
		return page;
	}

	public void setPage(PageManager page) {
		this.page = page;
	}

	// 添加
	public String add() {
		ResultSet rs = null;
		try {
			// String sql =
			// "select count(*) as dd from hostManagement where M_MANUAL = '"+hostManagement.getM_MANUAL()+"'";
			listH1 = hostManagementService.hhh(hostManagement);
			listH = hostManagementService.hh(hostManagement);

			System.out.println(listH.size());
			if (listH1.size() == 0) {
				if (listH.size() == 0) {
					DateFormat dateFormat = new SimpleDateFormat(
							"yyyy-MM-dd hh:mm:ss");
					hostManagement.setM_STATE("1");
					hostManagement.setCreateTime(dateFormat.format(new Date()));
					this.hostManagementService.add(hostManagement);
					System.out.println(hostManagement.getM_ID());
					String no = hostManagement.getM_MANUAL();
					Paymentmanagement pay = new Paymentmanagement();
					// pay.setPId(no);
					pay.setPNo(no);
					pay.setPHid(hostManagement.getM_HOUSEID());
					// 处理缴费时间
					
					pay.setPDate(dateFormat.format(new Date()));
					pay.setPMoney(100);
					int money = pay.getPMoney();
					System.out.println("aaa" + money);
					if (money >= 0) {
						pay.setPState("1");
					} else {
						pay.setPState("0");
					}
					this.paymentManagementService.addPay(pay);
					System.out.println("pay+++" + pay);
					result = 1;

				} else if (listH.size() != 0) {
					result = 2;
				}
			} else if (listH1.size() != 0) {
				result = 3;
			}

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			result = 0;
		}
		return "success";
	}

	public String searchHostManagement() {
		if (id == null) {
			id = 0;
		}
		this.hostManagementService.searchHostManagement(id, page);
		return "index";
	}

	/**
	 * 删除模块信息
	 * 
	 * @return
	 */
	public String del() {

		try {
			// msg=this.paymentManagementService.delPay(M_ID);
			host = this.hostManagementService.delHostManagement(M_ID);
			 msg=this.paymentManagementService.delPayByHostManualId(M_MANUAL);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return ERROR;
		}

		return "success";
	}

	// 批量删除
	public String delHosts() {
		System.out.println(ids);
		String str[] = ids.split("/");
		try {
			for (int i = 0; i < str.length; i++) {
				hostManagementService.delHostManagement(Integer
						.parseInt(str[i]));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return ERROR;
		}
		return "success";
	}

	/**
	 * 查询所有
	 * 
	 * @return
	 */
	public String findAll() {
		listH = this.hostManagementService.findAll();
		System.out.println("listH::::::" + listH);
		return SUCCESS;
	}

	/**
	 * 查询单个
	 * 
	 * @return
	 */
	public String findByIdHost() {
		hostManagement = this.hostManagementService.findById(M_ID);
		System.out.println(hostManagement);
		return SUCCESS;
	}

	/**
	 * 修改主机信息
	 * 
	 * @return
	 */
	public String update() {
		try {
			// System.out.println(hostManagement.getM_ID());
			DateFormat dateFormat = new SimpleDateFormat(
					"yyyy-MM-dd hh:mm:ss");
			hostManagement.setUpdateTime(dateFormat.format(new Date()));
			this.hostManagementService.updateHostManagement(hostManagement);
			result = 1;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			result = 0;
		}
		return SUCCESS;
	}

	/**
	 * 条件检索警报信息
	 * 
	 * @return
	 */
	public String selectHostManagement() {
		try {
			if (m_state != null && !"".equals(m_state)) {

				hostManagement1 = new HostManagement1();
				hostManagement1.setM_STATE(m_state);
			}
			if (p_state != null && !"".equals(p_state)) {

				paymentmanagement = new Paymentmanagement();
				paymentmanagement.setPState(p_state);
			}
			List<HostManagement1> list = this.hostManagementService
					.selectHostManagement(hostManagement1, page);
			// this.larumService.searchLarums(page);
			System.out.println(list);
			result = 0;

		} catch (Exception e) {
			result = 1;
			return ERROR;
		}

		return "selectHostManagement";
	}

}
