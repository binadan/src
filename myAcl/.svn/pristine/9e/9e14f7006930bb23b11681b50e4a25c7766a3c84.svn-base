package com.gcflower.action;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.SQLQuery;

import com.gcflower.entity.HostManagement;
import com.gcflower.entity.HostManagement1;
import com.gcflower.entity.Paymentmanagement;
import com.gcflower.service.HostManagementService;
import com.gcflower.service.PaymentManagementService;
import com.gcflower.util.PageManager;

public class HostManagementAction extends BaseAction {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	protected Log log = LogFactory.getLog(HostManagementAction.class);

	private Integer id;
	private String host;
	private Integer M_ID;
	private String msg;//接收
	private int result;
	private Paymentmanagement paymentmanagement;
	private PaymentManagementService paymentManagementService;
	private HostManagement1 hostManagement1;
	private String ids;//id串
	
	

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public String getMsg() {
		return msg;
	}

	public void setMsg(String msg) {
		this.msg = msg;
	}

	public HostManagement1 getHostManagement1() {
		return hostManagement1;
	}

	public void setHostManagement1(HostManagement1 hostManagement1) {
		this.hostManagement1 = hostManagement1;
	}

	public Paymentmanagement getPaymentmanagement() {
		return paymentmanagement;
	}

	public void setPaymentmanagement(Paymentmanagement paymentmanagement) {
		this.paymentmanagement = paymentmanagement;
	}

	public PaymentManagementService getPaymentManagementService() {
		return paymentManagementService;
	}

	public void setPaymentManagementService(
			PaymentManagementService paymentManagementService) {
		this.paymentManagementService = paymentManagementService;
	}

	public int getResult() {
		return result;
	}

	public void setResult(int result) {
		this.result = result;
	}

	public Integer getM_ID() {
		return M_ID;
	}

	public void setM_ID(Integer m_ID) {
		M_ID = m_ID;
	}

	public String getHost() {
		return host;
	}

	public void setHost(String host) {
		this.host = host;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	private HostManagement hostManagement;

	private HostManagementService hostManagementService;

	private List<HostManagement> listH;

	private PageManager page = new PageManager(10);

	public HostManagement getHostManagement() {
		return hostManagement;
	}

	public void setHostManagement(HostManagement hostManagement) {
		this.hostManagement = hostManagement;
	}

	public HostManagementService getHostManagementService() {
		return hostManagementService;
	}

	public void setHostManagementService(
			HostManagementService hostManagementService) {
		this.hostManagementService = hostManagementService;
	}

	public List<HostManagement> getListH() {
		return listH;
	}

	public void setListH(List<HostManagement> listH) {
		this.listH = listH;
	}

	public PageManager getPage() {
		return page;
	}

	public void setPage(PageManager page) {
		this.page = page;
	}

	// 添加
	public String add() {
		
	try {
		hostManagement.setM_STATE("1");
		this.hostManagementService.add(hostManagement);
		System.out.println(hostManagement.getM_ID());
		String no = hostManagement.getM_MANUAL();
		Paymentmanagement pay = new Paymentmanagement();
		//pay.setPId(no);
		pay.setPNo(no);
		pay.setPHid(hostManagement.getM_HOUSEID());
		// 处理缴费时间 
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		pay.setPDate(dateFormat.format(new Date()));
		pay.setPMoney(100);
		int money = pay.getPMoney();
		System.out.println("aaa"+money);
		if (money>=0) {
			pay.setPState("1");
		}
		else{
			pay.setPState("0");
		}
		this.paymentManagementService.addPay(pay);
		System.out.println("pay+++"+pay);
		result=1;
		
	} catch (Exception e) {
		// TODO: handle exception
		e.printStackTrace();
	    result=0;
	}
	   return "success";
	}
	
	public String searchHostManagement() {
		if (id == null) {
			id = 0;
		}
		this.hostManagementService.searchHostManagement(id, page);
		return "index";
	}

	/**
	 * 删除模块信息
	 * 
	 * @return
	 */
	public String del() {
		
		try {
			//msg=this.paymentManagementService.delPay(M_ID);
			host = this.hostManagementService.delHostManagement(M_ID);
			//msg=this.paymentManagementService.delPay(M_ID);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return ERROR;
		}
		
		return "success";
	}

	//批量删除
	public String delHosts(){
		System.out.println(ids);
		String str[]=ids.split("/");
		try{
			for(int i=0;i<str.length;i++){				
				hostManagementService.delHostManagement(Integer.parseInt(str[i]));
			}
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return ERROR;
		}		
		return "success";
	}
	/**
	 * 查询所有
	 * 
	 * @return
	 */
	public String findAll() {
		listH = this.hostManagementService.findAll();
		System.out.println("listH::::::"+listH);
		return SUCCESS;
	}
	/**
	 * 查询单个
	 * @return
	 */
	public String findByIdHost(){
		hostManagement=this.hostManagementService.findById(M_ID);
		System.out.println(hostManagement);
		return SUCCESS;
	}
	
	/**
	 * 修改主机信息
	 * @return
	 */
	public String update(){
		try {
			//System.out.println(hostManagement.getM_ID());
			this.hostManagementService.updateHostManagement(hostManagement);
			result=1;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			result=0;
		}
		return SUCCESS;
	}
	
	/**
	 * 条件检索警报信息
	 * @return
	 */
	public String selectHostManagement(){
		try{
			//System.out.println(hostManagement1.getM_STATE()+"========="+hostManagement1.getP_STATE());
			List<HostManagement1> list= this.hostManagementService.selectHostManagement(hostManagement1,page);
			//this.larumService.searchLarums(page);
			System.out.println(list);
			result = 0;
			
		}catch (Exception e) {
			result=1;
			return ERROR;
		}
		
		return "selectHostManagement";
	}
	
}
